snippet cp "competitive programming"
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<long long> vll;
typedef vector<double> vd;

#define vvi(name, H, W, val) vector<vector<int>> name((H), vector<int>((W), val));
#define vvvi(name, d1, d2, d3, val) vector<vector<vector<int>>> name((d1), vector<vector<int>>((d2), vector<int>((d3), val)));

#define vvll(name, H, W, val) vector<vector<long long>> name((H), vector<long long>((W), val));
#define vvvll(name, d1, d2, d3, val) vector<vector<vector<long long>>> name((d1), vector<vector<long long>>((d2), vector<long long>((d3), val)));

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

	$1
}
endsnippet

snippet cpt "competitive programming with test cases"
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<long long> vll;
typedef vector<double> vd;

#define vvi(name, H, W, val) vector<vector<int>> name((H), vector<int>((W), val));
#define vvvi(name, d1, d2, d3, val) vector<vector<vector<int>>> name((d1), vector<vector<int>>((d2), vector<int>((d3), val)));

#define vvll(name, H, W, val) vector<vector<long long>> name((H), vector<long long>((W), val));
#define vvvll(name, d1, d2, d3, val) vector<vector<vector<long long>>> name((d1), vector<vector<long long>>((d2), vector<long long>((d3), val)));

void solve() {
	$1
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

	int t;
	cin >> t;
	for (int i = 0; i < t; i++) {
		solve();
	}
}
endsnippet

snippet forl "for loop"
for (int $1 = 0; $1 < $2; $1++) $3
endsnippet

snippet segtree "segment tree template"
struct TreeNode {
	int l, r;
	int value;
	TreeNode *left, *right;

	TreeNode(int leftMost, int rightMost) {
		l = leftMost;
		r = rightMost;

		value = 0;

		if (l != r) {
			int mid = l + (r-l) / 2;
			left = new TreeNode(l, mid);
			right = new Treenode(mid+1, r);
			recalc();
		}
	}

	~TreeNode() {
		if (l != r) {
			delete left;
			delete right;
		}
	}

	void recalc() {
		if (l != r)
			value = max(left->value, right->value);
	}

	void pointUpdate(int idx, int val) {
		if (l == r) {
			value = val;
			return;
		}

		if (idx <= left->r)
			left -> pointUpdate(idx, val);
		else
			right -> pointUpdate(idx, val);

		recalc();
	}

	int rangeQuery(int leftMost, int rightMost) {
		if (leftMost > r || rightMost < l)
			return 0;

		if (leftMost <= l && rightMost >= r)
			return value;

		return max(left->rangeQuery(leftMost, rightMost),
					right->rangeQuery(leftMost, rightMost));
	}
};
endsnippet
